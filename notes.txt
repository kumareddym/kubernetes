KUBERNETES COMPLETE

Kubernetes is an open source container orchestration engine for automating deployment, scaling, and management of containerized applications.
A Kubernetes cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node.

POD:

A Pod is the basic execution unit of a Kubernetes application--the smallest and simplest unit in the Kubernetes object model that you create or deploy.
**Each POD many have multiple containers. But “one-container-per-Pod” is recommended.
Each Pod is meant to run a single instance of a given application.
Pods provide two kinds of shared resources for their constituent containers: networking and storage.
Each Pod is assigned a unique IP address. Every container in a Pod shares the network namespace, including the IP address and network ports.
A Pod can specify a set of shared storage volumes. All containers in the Pod can access the shared volumes, allowing those containers to share data.
A Pod is not a process, but an environment for running a container. A Pod persists until it is deleted.

NODES:

A node is a worker machine in Kubernetes,and node may be a VM or physical machine.
Each node contains the services necessary to run pods and is managed by the master components. The services on a node include the container runtime, kubelet and kube-proxy.
Node is externally created by cloud providers.

Features of orchestration tools:

1. High availability or no downtime
2. scalability or high performance
3. Disaster  recovery- restore and backup

Architecture of Kubernetes:

-> when you deploy k8s, you get a cluster
-> a cluster is a set of machines called nodes
-> a cluster has atleast one worker node 
-> a muster node is a node which controlls and manages set of worker nodes
-> worker node is a node it performs the work which is given by master node
-> Worker node is a physical or virtual machine

Master node Components--->

1. etcd: It stores the configuration information which can be used by each of the nodes in the cluster. It is a distributed key value Store which is accessible to all.
2. API Server(MAIN): The Kubernetes API server validates and configures data for the api objects which include pods, services, replicationcontrollers, and others. It helps in communication of pods by using kubectl
3. Controller Manager: It is responsible for maintaining desired states mentioned in the manifest.
4. Scheduler: It watches for new work tasks and assigns them to healthy nodes in the cluster. The scheduler is responsible for workload utilization and allocating pod to new node.

Worker node components--->

1.Docker: Docker is a tool by using docker we can run and deploy the applications and also it uses thecontainers. Containers consists of packages and dependencies.
2.Kubelet: it is an agent running on each node communicate with components from master node.
3.kube proxy: it exposes the services to outside of the world.

CLUSTER >>> NODE >>> POD  
CLUSTER = NODES + MASTER
NODE = PODS + Containers
POD = Containers

Cluster consisting of Nodes and node consisting of pods
Node consist of pods and containers

Components of kubernetes-->

1. Pod

->It is smallest unit in kubernetes.
->Abstraction over the container
->Usually 1 application per pod
->Each pod having own IP address
New IP address on re-creation
2. Service and Ingress

Service is a static IP address or permanent IP address that can be attached so to say pod and lifecycle of pod and service  not connected.
Ingress is an API object that provides routing rules to manage external users access to the services in a kubernetes cluster, typically via HTTPS/HTTP.
3.Configmap & Secret

->Database URL usually in the built application.
                                 
                                               Re-build
					          |
					       Push it to repo
					          |
					       Pull it in your pod

-> Configmap would usually contain configuration data like urls of database or some other servicesthat you use.
-> ConfigMap is for non-confidential data only!
-> putting the passwords or confidentials in a configmap in a plain text format would be insecure.
-> To overcome this we have a component in kubernetes calles Secret.
Secret:

-> Used to store secret data
-> Secret would contain things like credentials
-> Reference secret in Deployment/Pod

4. Volume

-> If the database container or the pods gets restarted the data would be gone and that's problematic and inconvenient obviously because you want your database data or log data to be persisted reliably long term and the way
you can do it in kubernetes is using another component of kubernetes called volumes.
-> Storage on local machine
-> Or remote, outside of the k8s cluster
 	
