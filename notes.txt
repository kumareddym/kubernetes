KUBERNETES COMPLETE

Kubernetes is an open source container orchestration engine for automating deployment, scaling, and management of containerized applications.
A Kubernetes cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node.

POD:

A Pod is the basic execution unit of a Kubernetes application--the smallest and simplest unit in the Kubernetes object model that you create or deploy.
**Each POD many have multiple containers. But “one-container-per-Pod” is recommended.
Each Pod is meant to run a single instance of a given application.
Pods provide two kinds of shared resources for their constituent containers: networking and storage.
Each Pod is assigned a unique IP address. Every container in a Pod shares the network namespace, including the IP address and network ports.
A Pod can specify a set of shared storage volumes. All containers in the Pod can access the shared volumes, allowing those containers to share data.
A Pod is not a process, but an environment for running a container. A Pod persists until it is deleted.

NODES:

A node is a worker machine in Kubernetes,and node may be a VM or physical machine.
Each node contains the services necessary to run pods and is managed by the master components. The services on a node include the container runtime, kubelet and kube-proxy.
Node is externally created by cloud providers.

Features of orchestration tools:

1. High availability or no downtime
2. scalability or high performance
3. Disaster  recovery- restore and backup

Architecture of Kubernetes:

-> when you deploy k8s, you get a cluster
-> a cluster is a set of machines called nodes
-> a cluster has atleast one worker node 
-> a muster node is a node which controlls and manages set of worker nodes
-> worker node is a node it performs the work which is given by master node
-> Worker node is a physical or virtual machine

Master node Components--->

1. etcd: It stores the configuration information which can be used by each of the nodes in the cluster. It is a distributed key value Store which is accessible to all.
2. API Server(MAIN): The Kubernetes API server validates and configures data for the api objects which include pods, services, replicationcontrollers, and others. It helps in communication of pods by using kubectl
3. Controller Manager: It is responsible for maintaining desired states mentioned in the manifest.
4. Scheduler: It watches for new work tasks and assigns them to healthy nodes in the cluster. The scheduler is responsible for workload utilization and allocating pod to new node.

Worker node components--->

1.Docker: Docker is a tool by using docker we can run and deploy the applications and also it uses thecontainers. Containers consists of packages and dependencies.
2.Kubelet: it is an agent running on each node communicate with components from master node.
3.kube proxy: it exposes the services to outside of the world.

CLUSTER >>> NODE >>> POD  
CLUSTER = NODES + MASTER
NODE = PODS + Containers
POD = Containers

Cluster consisting of Nodes and node consisting of pods
Node consist of pods and containers

Components of kubernetes-->

1. Pod

->It is smallest unit in kubernetes.
->Abstraction over the container
->Usually 1 application per pod
->Each pod having own IP address
New IP address on re-creation
2. Service and Ingress

Service is a static IP address or permanent IP address that can be attached so to say pod and lifecycle of pod and service  not connected.
Ingress is an API object that provides routing rules to manage external users access to the services in a kubernetes cluster, typically via HTTPS/HTTP.
3.Configmap & Secret

->Database URL usually in the built application.
                                 
                                               Re-build
					          |
					       Push it to repo
					          |
					       Pull it in your pod

-> Configmap would usually contain configuration data like urls of database or some other servicesthat you use.
-> ConfigMap is for non-confidential data only!
-> putting the passwords or confidentials in a configmap in a plain text format would be insecure.
-> To overcome this we have a component in kubernetes calles Secret.
Secret:

-> Used to store secret data
-> Secret would contain things like credentials
-> Reference secret in Deployment/Pod

4. Volume

-> If the database container or the pods gets restarted the data would be gone and that's problematic and inconvenient obviously because you want your database data or log data to be persisted reliably long term and the way
you can do it in kubernetes is using another component of kubernetes called volumes.
-> Storage on local machine
-> Or remote, outside of the k8s cluster
 
5.Deployment & Statefullset :

-> Blueprint for "my-app" Pods
-> You create Deployments
-> Abstraction of pods
-> DB can't be replicated via deployment
 
Avoid data inconsistencies and  that mechanism in addition to replicating feature is offered by "Statefullset".

Deployment = for stateLESS Apps
StateFulSet = for stateFul Apps or databases

Summararized components of k8s:

pod:Abtraction of containers
Service: Communication
Ingress: Route traffic into cluster
Configmap and secret: Extrenal configuration
Volume: data persistence
Deployment and statefulset: Replication

Kuberenetes configuration:

-> Declarative
3 parts of k8s file:
 Each configuration file has 3 parts
 
1. metadata: Name of the configuration file
2. Specification: Each components configuration file will have a specification where you basically put every kind of configuration that you want to apply for that component.
  -> Attributes of "spec" are specific to the kind
3. Automatically generated and added by kubernetes

ETCD : it holds the current status of any k8s component.

Formate of k8s configuration file :

Syntax : strict indentation

Store the config file with your code or own git repository

-->Minikube & kubectl Local setup :
 
Production cluster setup :
 
1. Multiple master and worker nodes
2. Separate VM or physical machine

Minikube: Master and node processes run on ONE Machine.
Minikube and kubectl downloaded and I'm unable to install(Stucked here)

Demo project:- Deploye webapp with mongodb
 1. mongo-config.yaml 
 2 mongo-secret.yaml - defined mongo username and password 
 3. mongo.yaml - deployment & service in one file because they belong together
 - kind: "deployment"
main part blue print for ports
- template : "configuration for pod " has its own metadata and spec section
- containers : which image?
               which port?
- Label : 
 you can give any k8s components a label
 lables are key/value pairs that are attached to k8s resources
 identifier, which should be meaningfull and relavant to users
examples : 

"release"  : "stable"
"release" : "dev"
"env" : " production"
"env" : "dev"

 label selector:

->Identifies a set of resources
-> Match all pods with label "app:nginx"

Replicas: how many pods you want to create

->You can have multiple YAML configurations within 1 file "---"=
-kind: "service"
-name: an atribute name

-selector: select pods to forward the requests to

-ports:
    -port:  service port
    - target: container port of deployment



						Request
						  |
						  |port:8080
						Mongo Service
						  |
						  |targetport:27017
						Pod
						  ContainerPort:27017

-> Which port forward the request to the pods

Configmap - MongoDB Endpoint
Secret - MOngo User & pwd

Deployment, Service - MongoDB application with internal service

Deployment , Service - Our own webapp with external service

Webaapp Deployment & Service:

Creating account in Docker hub

Pass secret data to mongo deployment:

-> we need to pass the secret and configmap data into pods.
-> starting a mongoDB application 
1. We need to set : Username and Password
2. Will generate a new user and set that user's password

3. MongoDB application expects these environment variables:

MONGO_INITDB_ROOT_USERNAME
system info


Pass config data to webapp deployment:

Make it external Services:

-type: service type

Default = ClusterIP
-> an external service

NodePort

-nodePort: Exposes the Services on each nodes IP at a static port

<NodeIP>:<NodePort>
 Range must be between 30000-32767

Deploy all resources in minikube cluster:

Installing Oracle Virtual Machine, minikube, Kubectl

commands : 

--> systeminfo
--> kubectl version
--> minikube start --driver=virtualbox

successfully downloaded and installed kubectl in my machine but i'm facing issue with minikube i'm working on that(virtualization and  VT-X/AMD-v is disabled in my machine)

**Different options to use kubernetes:

1. online kubernetes labs

-> Kuberenetes playground
-> Play with k8s
-> play with kubernetes classroom


2. kubernetes installation tools
3. cloud based kubernetes service

Ubuntu-- Oracle VM  VirtualBox :--

open terminal 

commands: 
	--> sudo apt-get update -y( once successfully updated you system )
then we need to check all required packages need to check
	--> sudo apt-get install curl
once packages done
	--> sudo apt-get install apt-transport-https 
if already done apt-get install apt-transport-https virsion

Install Virtual box hyperviser in Ubuntu:-

	--> sudo apt install virtulbox virtualbox-ext-pack
Virtualbox is already is there
then we need to check minikube and kubectl
	
""NETWORKING IN KUBERNETES""---

Kubernetes cluster:--A cluster is a foumdation of k8s engine. It has various components such as worker nodes, API's, kubelet processes, deployment files

Problems to solve!!:--

1. container-to-container communication

	-- comminication between to container image

2. Pod-to-pod communication
	-- comminication between to two different pods having various imges and replicas

3. Pod-to-servive communication
	-- Is how service enables pod to communicate with any other pod

4. External-to-service communication
	-- Is how external to service communication is how something out of the cluster can communicate something which is inside the cluster

""Requirements of kubernetes model"":--

	Kubernetes model has few fundamental requirements for any networking implementation.

--> all containers can communicate with all other containers without NAt
--> all nodes can communicate with all containers (and vice-versa) without NAT
--> the IP that a container sees itself as is the same IP that others see it as

Kubernetes networking:--

	kubernetes is a powerfull platform having many designs choices and to understand the networking in kubernete cluster, you need to understand the communication between pods, service and external world.

1. container and pod

	a pod consist of one or more containers that are colected on the same host, and are configured to share a network stac and other resources such as units.

	Pods: virtual network interface:--
		
			Docker can start a container and rather then creationg a new virtual network interface for it, specify that it shares an existing interface.
	
	Pods: Pause:--

			suspends the current process until a signal is received. So these containers do nothing at all except sleep untill kubernetes sends them a signal.

	Pod network: Components
			
			while two pods communicate with each other with the intra node network or inter node network
			two types of communication within pod

	components of pod network:

		For every kubernetes node there is a root network namespace, pod network namespace, and Linux network Bridge
		now each pod has a own network with virtual internet pare connecting with the root network. so these is the basically like pipare with one and rootnetwork and other end in the pod network.

	Pod network: Intra- Node communication: 

		it is basically communication with two different pod on the same node
		
2. service

	A srevice is a type of kubernetes resource that is configured to forward request to aset of pods, Services have an IP address and this IP address automatically routes to a healthy pod.
				
			Node---------- Node IP : 172.17.8.102
			 !
			 !

		      Service---------- Domain Name : service
			!		IP: 10.2.10.20
		 ------	!------		Port: 9443
		!	!	!	Node port: 32001
	      Pod 1    Pod 2   Pod 3	Protocol: TCP
		L1	L1	L1

	Service types:

	Cluster IP				Node port				Load balancer					External name 

   --- Exposes the service on a 	     --- Exposes services on		    --- expposes the service externally		     --- Maps the service to the contents of the external
       cluster-internal IP.			 each nodes's IP at a 			using a cloude provider's load balancer		 name field by returning a CNAME record with its value
   --- Makes the service only 			 static port.	
       reachable from within the cluster.    --- A cluster IP service to	    --- service to which the external load balancer  --- No proxying of any kind is set up
   --- this is the default service type. 	 which node port service		will route, are automatically created
						 will route, is automatically created 
3. ingress network

		a collection of rules that allow inbound connections, which can be configured to give service externally through reachable URLs, load balance trafic, or by offereing name-based virtual hosting.


Network plugins :

--> Google compute engine
--> flannel
--> Amezan web services
--> Romana

